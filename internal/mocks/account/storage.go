// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alphaonly/multipass/internal/domain/Account (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	account "passwords/internal/domain/account"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl       *gomock.Controller
	recAccount *MockStorageMockRecAccount
}

// MockStorageMockRecAccount is the mock recAccount for MockStorage
type MockStorageMockRecAccount struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recAccount = &MockStorageMockRecAccount{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecAccount {
	return m.recAccount
}

// GetNewAccountsList mocks base method
func (m *MockStorage) GetNewAccountsList(arg0 context.Context) (account.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewAccountsList", arg0)
	ret0, _ := ret[0].(account.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewAccountsList indicates an expected call of GetNewAccountsList
func (mr *MockStorageMockRecAccount) GetNewAccountsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewAccountsList", reflect.TypeOf((*MockStorage)(nil).GetNewAccountsList), arg0)
}

// GetAccount mocks base method
func (m *MockStorage) GetAccount(arg0 context.Context, arg1 string) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockStorageMockRecAccount) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStorage)(nil).GetAccount), arg0, arg1)
}

// GetAccountsList mocks base method
func (m *MockStorage) GetAccountsList(arg0 context.Context, arg1 string) (account.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsList", arg0, arg1)
	ret0, _ := ret[0].(account.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsList indicates an expected call of GetAccountsList
func (mr *MockStorageMockRecAccount) GetAccountsList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsList", reflect.TypeOf((*MockStorage)(nil).GetAccountsList), arg0, arg1)
}

// SaveAccount mocks base method
func (m *MockStorage) SaveAccount(arg0 context.Context, arg1 account.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAccount indicates an expected call of SaveAccount
func (mr *MockStorageMockRecAccount) SaveAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccount", reflect.TypeOf((*MockStorage)(nil).SaveAccount), arg0, arg1)
}
