// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alphaonly/multipass/internal/domain/account (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	order "github.com/alphaonly/multipass/internal/domain/account"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetNewOrdersList mocks base method
func (m *MockStorage) GetNewOrdersList(arg0 context.Context) (order.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewOrdersList", arg0)
	ret0, _ := ret[0].(order.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewOrdersList indicates an expected call of GetNewOrdersList
func (mr *MockStorageMockRecorder) GetNewOrdersList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewOrdersList", reflect.TypeOf((*MockStorage)(nil).GetNewOrdersList), arg0)
}

// GetOrder mocks base method
func (m *MockStorage) GetOrder(arg0 context.Context, arg1 int64) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder
func (mr *MockStorageMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStorage)(nil).GetOrder), arg0, arg1)
}

// GetOrdersList mocks base method
func (m *MockStorage) GetOrdersList(arg0 context.Context, arg1 string) (order.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersList", arg0, arg1)
	ret0, _ := ret[0].(order.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersList indicates an expected call of GetOrdersList
func (mr *MockStorageMockRecorder) GetOrdersList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersList", reflect.TypeOf((*MockStorage)(nil).GetOrdersList), arg0, arg1)
}

// SaveOrder mocks base method
func (m *MockStorage) SaveOrder(arg0 context.Context, arg1 order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder
func (mr *MockStorageMockRecorder) SaveOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockStorage)(nil).SaveOrder), arg0, arg1)
}
